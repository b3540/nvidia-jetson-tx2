
#include <stdlib.h>
#include <time.h>
#include <sys/time.h>
#include "iothub.h"
#include "iothub_device_client.h"
#include "iothub_client_options.h"
#include "iothub_message.h"
#include "azure_c_shared_utility/threadapi.h"
#include "azure_c_shared_utility/crt_abstractions.h"
#include "azure_c_shared_utility/platform.h"
#include "azure_c_shared_utility/shared_util_options.h"
#include "iothubtransportamqp.h"

/* Paste in your device connection string  */
static const char *connectionString = "<< Connection String for Azure IoT Hub >>";

int g_interval = 10000;
static size_t g_message_count_send_confirmations = 0;

static IOTHUBMESSAGE_DISPOSITION_RESULT receive_msg_callback(IOTHUB_MESSAGE_HANDLE message, void *user_context)
{
	(void)user_context;
	const char *messageId;
	const char *correlationId;

	// Message properties
	if ((messageId = IoTHubMessage_GetMessageId(message)) == NULL)
	{
		messageId = "<unavailable>";
	}

	if ((correlationId = IoTHubMessage_GetCorrelationId(message)) == NULL)
	{
		correlationId = "<unavailable>";
	}

	IOTHUBMESSAGE_CONTENT_TYPE content_type = IoTHubMessage_GetContentType(message);
	if (content_type == IOTHUBMESSAGE_BYTEARRAY)
	{
		const unsigned char *buff_msg;
		size_t buff_len;

		if (IoTHubMessage_GetByteArray(message, &buff_msg, &buff_len) != IOTHUB_MESSAGE_OK)
		{
			(void)printf("Failure retrieving byte array message\r\n");
		}
		else
		{
			(void)printf("Received Binary message\r\nMessage ID: %s\r\n Correlation ID: %s\r\n Data: <<<%.*s>>> & Size=%d\r\n", messageId, correlationId, (int)buff_len, buff_msg, (int)buff_len);
		}
	}
	else
	{
		const char *string_msg = IoTHubMessage_GetString(message);
		if (string_msg == NULL)
		{
			(void)printf("Failure retrieving byte array message\r\n");
		}
		else
		{
			(void)printf("Received String Message\r\nMessage ID: %s\r\n Correlation ID: %s\r\n Data: <<<%s>>>\r\n", messageId, correlationId, string_msg);
		}
	}
	return IOTHUBMESSAGE_ACCEPTED;
}

static int device_method_callback(const char *method_name, const unsigned char *payload, size_t size, unsigned char **response, size_t *resp_size, void *userContextCallback)
{
	const char *SetTelemetryIntervalMethod = "SetTelemetryInterval";
	const char *device_id = (const char *)userContextCallback;
	char *end = NULL;
	int newInterval;

	int status = 501;
	const char *RESPONSE_STRING = "{ \"Response\": \"Unknown method requested.\" }";

	(void)printf("\r\nDevice Method called for device %s\r\n", device_id);
	(void)printf("Device Method name:    %s\r\n", method_name);
	(void)printf("Device Method payload: %.*s\r\n", (int)size, (const char *)payload);

	if (strcmp(method_name, SetTelemetryIntervalMethod) == 0)
	{
		if (payload)
		{
			newInterval = (int)strtol((char *)payload, &end, 10);

			// Interval must be greater than zero.
			if (newInterval > 0)
			{
				// expect sec and covert to ms
				g_interval = 1000 * (int)strtol((char *)payload, &end, 10);
				status = 200;
				RESPONSE_STRING = "{ \"Response\": \"Telemetry reporting interval updated.\" }";
			}
			else
			{
				status = 500;
				RESPONSE_STRING = "{ \"Response\": \"Invalid telemetry reporting interval.\" }";
			}
		}
	}

	(void)printf("\r\nResponse status: %d\r\n", status);
	(void)printf("Response payload: %s\r\n\r\n", RESPONSE_STRING);

	*resp_size = strlen(RESPONSE_STRING);
	if ((*response = (unsigned char *)malloc(*resp_size)) == NULL)
	{
		status = -1;
	}
	else
	{
		memcpy(*response, RESPONSE_STRING, *resp_size);
	}

	return status;
}

static void connection_status_callback(IOTHUB_CLIENT_CONNECTION_STATUS result, IOTHUB_CLIENT_CONNECTION_STATUS_REASON reason, void *user_context)
{
	(void)reason;
	(void)user_context;
	// This sample DOES NOT take into consideration network outages.
	if (result == IOTHUB_CLIENT_CONNECTION_AUTHENTICATED)
	{
		(void)printf("The device client is connected to iothub\r\n");
	}
	else
	{
		(void)printf("The device client has been disconnected\r\n");
	}
}

static void send_confirm_callback(IOTHUB_CLIENT_CONFIRMATION_RESULT result, void *userContextCallback)
{
	(void)userContextCallback;
	// When a message is sent this callback will get envoked
	g_message_count_send_confirmations++;
	(void)printf("Confirmation callback received for message %lu with result %s\r\n", (unsigned long)g_message_count_send_confirmations, ENUM_TO_STRING(IOTHUB_CLIENT_CONFIRMATION_RESULT, result));
}

int iotHubMessageCount = 0;
IOTHUB_DEVICE_CLIENT_HANDLE device_handle;
time_t azure_iothub_send_prev_time;

static bool azureIoTHubSetup()
{
	IOTHUB_CLIENT_TRANSPORT_PROVIDER protocol;
	protocol = AMQP_Protocol;

	// Used to initialize IoTHub SDK subsystem
	(void)IoTHub_Init();

	(void)printf("Creating IoTHub handle\r\n");
	// Create the iothub handle here
	device_handle = IoTHubDeviceClient_CreateFromConnectionString(connectionString, protocol);
	if (device_handle == NULL)
	{
		(void)printf("Failure createing Iothub device.  Hint: Check you connection string.\r\n");
		return false;
	}
	else
	{
		// Setting message callback to get C2D messages
		(void)IoTHubDeviceClient_SetMessageCallback(device_handle, receive_msg_callback, NULL);
		// Setting method callback to handle a SetTelemetryInterval method to control
		//   how often telemetry messages are sent from the simulated device.
		(void)IoTHubDeviceClient_SetDeviceMethodCallback(device_handle, device_method_callback, NULL);
		// Setting connection status callback to get indication of connection to iothub
		(void)IoTHubDeviceClient_SetConnectionStatusCallback(device_handle, connection_status_callback, NULL);

		// Set any option that are neccessary.
		// For available options please see the iothub_sdk_options.md documentation

		bool traceOn = true;
		(void)IoTHubDeviceClient_SetOption(device_handle, OPTION_LOG_TRACE, &traceOn);
		azure_iothub_send_prev_time = time(NULL);

		return true;
	}
}

#define AZURE_IOTHUB_MESSAGE_LENGTH_MAX 7172
char azure_iothub_message[AZURE_IOTHUB_MESSAGE_LENGTH_MAX];
int azure_iothub_message_length = 0;

static void azureIoTHubSendMsg(char *message)
{
	IOTHUB_MESSAGE_HANDLE message_handle;

	message_handle = IoTHubMessage_CreateFromString(azure_iothub_message);

	// Set Message property
	(void)IoTHubMessage_SetMessageId(message_handle, "MSG_ID");
	(void)IoTHubMessage_SetCorrelationId(message_handle, "CORE_ID");
	(void)IoTHubMessage_SetContentTypeSystemProperty(message_handle, "application%2fjson");
	(void)IoTHubMessage_SetContentEncodingSystemProperty(message_handle, "utf-8");

	// Add custom properties to message
	// (void)IoTHubMessage_SetProperty(message_handle, "property_key", "property_value");

	(void)printf("\r\nSending message %d to IoTHub\r\nMessage size is %lu bytes\r\n", (int)(iotHubMessageCount + 1), strlen(azure_iothub_message));
	IoTHubDeviceClient_SendEventAsync(device_handle, message_handle, send_confirm_callback, NULL);
	azure_iothub_send_prev_time = time(NULL);

	// The message is copied to the sdk so the we can destroy it
	IoTHubMessage_Destroy(message_handle);
	iotHubMessageCount = iotHubMessageCount + 1;
}

static void azureIoTHubSend(char *message)
{
	if (azure_iothub_message_length == 0)
	{
		azure_iothub_message[0] = '[';
		azure_iothub_message[1] = '\0';
		azure_iothub_message_length = strlen(azure_iothub_message);
	}
	if (azure_iothub_message_length + strlen(message) + 2 > AZURE_IOTHUB_MESSAGE_LENGTH_MAX)
	{
		strcat(azure_iothub_message, "]");
		azureIoTHubSendMsg(azure_iothub_message);
		sprintf(azure_iothub_message, "[%s", message);
		azure_iothub_message_length = strlen(azure_iothub_message);
	}
	else
	{
		if (azure_iothub_message[azure_iothub_message_length - 1] != '[')
			strcat(azure_iothub_message, ",");
		strcat(azure_iothub_message, message);
		azure_iothub_message_length = strlen(azure_iothub_message);
		time_t current_time = time(NULL);
		if (difftime(current_time, azure_iothub_send_prev_time) > g_interval)
		{
			strcat(azure_iothub_message, "]");
			azureIoTHubSendMsg(azure_iothub_message);
			azure_iothub_message_length = 0;
		}
	}
}

